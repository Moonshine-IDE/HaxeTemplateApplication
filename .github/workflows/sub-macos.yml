name: SUB - Build macOS

on:    
  workflow_dispatch:
    inputs:
      env:
        description: 'An Environment'
        required: true
        type: choice
        options:
          - development
          - production
      version:
        description: 'A Version'
        required: true
        type: string
      caching:
        description: 'Use caching'
        required: true
        type: boolean
        default: false

  workflow_call:
    inputs:
      env:
        description: 'An Environment'
        required: true
        type: string
      version:
        description: 'A Version'
        required: true
        type: string
      caching:
        description: 'Use caching'
        required: true
        type: boolean
        default: false

env:
  app_name: ${{ inputs.env == 'production' && 'HaxeTemplateApplication' || 'HaxeTemplateApplicationDevelopment' }}
  app_id: net.prominic.${{ inputs.env == 'production' && 'HaxeTemplateApplication' || 'HaxeTemplateApplicationDevelopment' }}
  full_version: ${{ inputs.version }}.${{ github.run_number }}
  haxe_flag: ${{ inputs.env == 'production' && '-final' || '-debug' }}

jobs:
  build:
    runs-on: macos-latest
    
    steps:

      - name: Display Build info
        run: |
          echo "Ref: ${{ github.ref_name }}"
          echo "Env: ${{ inputs.env }}"
          echo "Version: ${{ env.full_version }}"
          echo "App Name: ${{ env.app_name }}"
          echo "App ID: ${{ env.app_id }}"
          echo "haxe_flag: ${{ env.haxe_flag }}"

      - name: Set up Haxe
        uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.2.5

      - name: Display haxe info
        run: |
          echo "Haxe version:"
          haxe -version
          echo "Haxe lib path:"
          haxelib config

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          lfs: true
      
      # Configure project

      - name: Override project.xml title
        uses: Moonshine-IDE/xml-replace-action@v1.0
        with:
          filepath: "./project.xml"
          xpath: "/project/meta/@title"
          replace: "${{ env.app_name }} ${{ inputs.version }} (Build: ${{ github.run_number }})"

      - name: Override project.xml package
        uses: Moonshine-IDE/xml-replace-action@v1.0
        with:
          filepath: "./project.xml"
          xpath: "/project/meta/@package"
          replace: "${{ env.app_id }}"

      - name: Override project.xml version
        uses: Moonshine-IDE/xml-replace-action@v1.0
        with:
          filepath: "./project.xml"
          xpath: "/project/meta/@version"
          replace: "${{ env.full_version }}"

      - name: Override project.xml file
        uses: Moonshine-IDE/xml-replace-action@v1.0
        with:
          filepath: "./project.xml"
          xpath: "/project/app/@file"
          replace: "${{ env.app_name }}"

      - name: Replace vars in Info.plist
        uses: Aszusz/replace-action@master
        with:
          files: build/Info.plist
          replacements: '$APP_NAME=${{ env.app_name }},$APP_ID=${{ env.app_id }},$VERSION=${{ env.full_version }}'

      # Install dependencies and build

      - name: Cache Binaries
        id: cache-bin
        if: ${{ inputs.caching }}
        uses: actions/cache@v3
        with:
          path: bin/macos/bin
          key: ${{ env.app_name }}-macos-bin

      - name: Install haxelib dependencies
        if: ${{ !inputs.caching || !steps.cache-bin.outputs.cache-hit }}
        run: haxe --run build/InstallDependencies.hx --main InstallDependencies
  
      - name: Build
        if: ${{ !inputs.caching || !steps.cache-bin.outputs.cache-hit }}
        run: haxelib run openfl build ./project.xml mac ${{ env.haxe_flag }} -clean

      - name: Replace entitlement
        run: >
          cp 
          build/Entitlements.plist 
          bin/macos/bin/${{ env.app_name }}.app/Contents/Entitlements.plist

      - name: Replace Info.plist
        run: >
          cp 
          build/Info.plist
          bin/macos/bin/${{ env.app_name }}.app/Contents/Info.plist

      - name: Show bin folder
        run: ls -R bin/macos/bin

      # Sign bin

      - name: Create keychain
        env:
          MAC_KEYCHAIN_PASS: ${{ secrets.MAC_KEYCHAIN_PASS }}
        run: |
          security create-keychain -p "$MAC_KEYCHAIN_PASS" build.keychain
          echo "Keychain created"
          security set-keychain-settings -lut 21600 build.keychain
          echo "Keychain settings set"
          security default-keychain -s build.keychain
          echo "Keychain made default"
          security unlock-keychain -p "$MAC_KEYCHAIN_PASS" build.keychain  
          echo "Keychain unlocked"

      - name: Import certificates
        env:
          MAC_APPLICATION_CERTKEY: ${{ secrets.MAC_APPLICATION_CERTKEY }}
          MAC_INSTALLER_CERTKEY: ${{ secrets.MAC_INSTALLER_CERTKEY }}
          MAC_CERTKEY_PASS: ${{ secrets.MAC_CERTKEY_PASS }}
        run: |
          echo "$MAC_APPLICATION_CERTKEY" | base64 --decode > application_certkey.p12
          echo "$MAC_INSTALLER_CERTKEY" | base64 --decode > installer_certkey.p12

          security import ./application_certkey.p12 \
            -k build.keychain \
            -f pkcs12 \
            -P "$MAC_CERTKEY_PASS" \
            -T /usr/bin/codesign \
            -T /usr/bin/productsign

          security import ./installer_certkey.p12 \
            -k build.keychain \
            -f pkcs12 \
            -P "$MAC_CERTKEY_PASS" \
            -T /usr/bin/codesign \
            -T /usr/bin/productsign
  
      - name: Allow codesign and productsign to use keychain
        env:
          MAC_KEYCHAIN_PASS: ${{ secrets.MAC_KEYCHAIN_PASS }}
        run: |
          security set-key-partition-list \
            -S apple-tool:,apple:,codesign:,productsign: \
            -s \
            -k "$MAC_KEYCHAIN_PASS" \
            build.keychain
          
      - name: Sign contents
        run: |
          codesign bin/macos/bin/${{ env.app_name }}.app \
            --sign "Developer ID Application" \
            --entitlements build/Entitlements.plist \
            --options runtime \
            --force \
            --timestamp \
            --verbose \
            --deep
          
      - name: Verify singature
        run: |
          codesign bin/macos/bin/${{ env.app_name }}.app \
            --display \
            --verbose \
            -r-

          codesign bin/macos/bin/${{ env.app_name }}.app \
            --verify \
            --verbose
  
        # Upload bin

      - name: Upload bin
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.app_name }}-macos-bin
          path: bin/macos/bin

      # Create package

      - name: Create package
        run: |
          productbuild \
            --version "${{ env.full_version }}" \
            --product build/Entitlements.plist \
            --identifier ${{ env.app_id }} \
            --component bin/macos/bin/${{ env.app_name }}.app \
            /Applications \
            ${{ env.app_name }}-Setup-Unsigned.pkg

      - name: Sign installer
        run: |
          productsign \
            --timestamp \
            --sign "Developer ID Installer" \
            ./${{ env.app_name }}-Setup-Unsigned.pkg \
            ./${{ env.app_name }}-Setup.pkg
              
      - name: "Notarize app bundle"
        env:
          MAC_NOTARIZATION_APPLE_ID: ${{ secrets.MAC_NOTARIZATION_APPLE_ID }}
          MAC_NOTARIZATION_TEAM_ID: ${{ vars.MAC_NOTARIZATION_TEAM_ID }}
          MAC_NOTARIZATION_PASS: ${{ secrets.MAC_NOTARIZATION_PASS }}
        run: |
          # Store the notarization credentials so that we can prevent a UI password dialog
          # from blocking the CI
          echo "Create keychain profile"
          xcrun notarytool \
            store-credentials "notarytool-profile" \
            --apple-id "$MAC_NOTARIZATION_APPLE_ID" \
            --team-id "$MAC_NOTARIZATION_TEAM_ID" \
            --password "$MAC_NOTARIZATION_PASS"
          
          echo "Notarize app"
          xcrun notarytool \
            submit ./${{ env.app_name }}-Setup.pkg \
            --keychain-profile "notarytool-profile" \
            --wait
          
          echo "Attach staple"
          xcrun stapler \
            staple ./${{ env.app_name }}-Setup.pkg
            
      - name: Verify installer signature
        run: |
          pkgutil --check-signature ./${{ env.app_name }}-Setup.pkg
          spctl \
            --assess \
            --type install \
            --verbose \
            --verbose \
            ./${{ env.app_name }}-Setup.pkg      

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.app_name }}-macos-installer
          path: ${{ env.app_name }}-Setup.pkg
          


     
